{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nfunction LoginComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \" Email is Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \" Email is Invalid \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \"Password should be at least 6 and at the max 15 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(formbuilder, http, router) {\n    this.formbuilder = formbuilder;\n    this.http = http;\n    this.router = router;\n  }\n  login() {\n    this.http.get(\"http://localhost:3000/superadmin\" && \"http://localhost:3000/adminlogin\").subscribe(res => {\n      const user = res.find(a => {\n        return a.email === this.loginform.value.email && a.password === this.loginform.value.password;\n      });\n      if (user) {\n        alert(\"loginsuccesfull\");\n        this.loginform.reset();\n        this.router.navigate([\"UsermainComponent\"]);\n      } else {\n        alert(\"user not found\");\n        this.router.navigate([\"login\"]);\n      }\n      error => {\n        alert(\"something went wrong\");\n      };\n    });\n  }\n  close() {\n    this.router.navigate([\"login\"]);\n  }\n  get Email() {\n    return this.loginform.get(\"email\");\n  }\n  get Password() {\n    return this.loginform.get(\"password\");\n  }\n  ngOnInit() {\n    this.loginform = this.formbuilder.group({\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\n      password: new FormControl(\"\", [Validators.required, Validators.maxLength(15), Validators.minLength(6)])\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 32,\n  vars: 5,\n  consts: [[1, \"login\"], [1, \"container\"], [\"src\", \"/assets/harman.jpg\", 1, \"img\"], [\"type\", \"button\", \"data-toggle\", \"modal\", \"data-target\", \"#myModal\", 1, \"btn\", \"btn-primary\", 2, \"margin-top\", \"90px\", \"margin-left\", \"200px\"], [\"id\", \"myModal\", 1, \"modal\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\", 2, \"margin-left\", \"35%\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"close\"], [1, \"Authentication\"], [3, \"formGroup\", \"ngSubmit\"], [\"for\", \"email\"], [\"type\", \"email\", \"placeholder\", \"Enter email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [\"for\", \"pwd\"], [\"type\", \"password\", \"placeholder\", \"Enter password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"type\", \"login\", 1, \"btn\", \"btn-primary\", \"mb-2\", 2, \"margin-left\", \"40%\", \"margin-top\", \"15%\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"form-text\", \"text-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"img\", 2);\n      i0.ɵɵelementStart(3, \"button\", 3);\n      i0.ɵɵtext(4, \" Login \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(5, \"form\")(6, \"div\", 4)(7, \"div\", 5)(8, \"div\", 6)(9, \"div\", 7)(10, \"h4\", 8);\n      i0.ɵɵtext(11, \"Authentication\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"button\", 9);\n      i0.ɵɵtext(13, \"\\u00D7\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 10)(15, \"form\", 11);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_15_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementStart(16, \"label\", 12);\n      i0.ɵɵtext(17, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 13);\n      i0.ɵɵtemplate(19, LoginComponent_div_19_Template, 2, 0, \"div\", 14);\n      i0.ɵɵtemplate(20, LoginComponent_div_20_Template, 2, 0, \"div\", 14);\n      i0.ɵɵelementStart(21, \"label\", 15);\n      i0.ɵɵtext(22, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"input\", 16);\n      i0.ɵɵtemplate(24, LoginComponent_div_24_Template, 2, 0, \"div\", 14);\n      i0.ɵɵtemplate(25, LoginComponent_div_25_Template, 2, 0, \"div\", 14);\n      i0.ɵɵelementStart(26, \"button\", 17);\n      i0.ɵɵtext(27, \"login\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(28, \"div\", 18)(29, \"button\", 19);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_29_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtext(30, \"Close\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelement(31, \"router-outlet\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(15);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginform);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Email.errors == null ? null : ctx.Email.errors[\"required\"]) && (ctx.Email.dirty || ctx.Email.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Email.errors == null ? null : ctx.Email.errors[\"email\"]) && (ctx.Email.dirty || ctx.Email.touched));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Password.errors == null ? null : ctx.Password.errors[\"required\"]) && (ctx.Password.dirty || ctx.Password.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Password.errors == null ? null : ctx.Password.errors[\"minlength\"]) || (ctx.Password.errors == null ? null : ctx.Password.errors[\"maxlength\"]) && (ctx.Password.dirty || ctx.Password.touched));\n    }\n  },\n  styles: [\".container[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  font-size: 16px;\\n  padding: 12px 24px;\\n  border: none;\\n  cursor: pointer;\\n  border-radius: 5px;\\n  text-align: center;\\n}\\n\\n.container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 80vh;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUNJLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxlQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7QUFBSjs7QUFFQTtFQUNJLFdBQUE7RUFDQSxZQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLmNvbnRhaW5lciAuYnRue1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiA1MCU7XHJcbiAgICBsZWZ0OiA1MCU7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBwYWRkaW5nOiAxMnB4IDI0cHg7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuLmNvbnRhaW5lciBpbWd7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogODB2aDtcclxuXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","Validators","i0","LoginComponent","constructor","formbuilder","http","router","login","get","subscribe","res","user","find","a","email","loginform","value","password","alert","reset","navigate","error","close","Email","Password","ngOnInit","group","required","maxLength","minLength","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\APerkampally\\Desktop\\folder\\User-Authorization\\userapp\\src\\app\\components\\login\\login.component.ts","C:\\Users\\APerkampally\\Desktop\\folder\\User-Authorization\\userapp\\src\\app\\components\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormControl, FormGroup, Validators ,FormBuilder} from '@angular/forms';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\npublic loginform!: FormGroup\r\n\r\nconstructor(private formbuilder:FormBuilder,private http:HttpClient,private router:Router){}\r\n\r\n  login(){\r\n    this.http.get<any>(\"http://localhost:3000/superadmin\" && \"http://localhost:3000/adminlogin\").subscribe(res=>{\r\n      const user =res.find((a:any)=>{\r\n        return a.email === this.loginform.value.email && a.password === this.loginform.value.password\r\n      });\r\n      if(user){\r\n        alert(\"loginsuccesfull\");\r\n        this.loginform.reset()\r\n        this.router.navigate([\"UsermainComponent\"])\r\n      }\r\n      else{\r\n        alert(\"user not found\")\r\n        this.router.navigate([\"login\"])\r\n      }\r\n      (error:any)=>{\r\n        alert(\"something went wrong\")\r\n      }\r\n    })\r\n  }\r\n\r\n  close(){\r\n           this.router.navigate([\"login\"])\r\n  }\r\n\r\n  get Email(): FormControl {\r\n     return this.loginform.get(\"email\")as FormControl;\r\n   }\r\n\r\n   get Password(): FormControl {\r\n     return this.loginform.get(\"password\")as FormControl;\r\n   } \r\n\r\n  ngOnInit(): void {\r\n    this.loginform=this.formbuilder.group({\r\n      email:new FormControl(\"\",[Validators.required,Validators.email]),\r\n      password:new FormControl(\"\",[Validators.required,Validators.maxLength(15),Validators.minLength(6)])\r\n            \r\n  \r\n    })\r\n  }    \r\n\r\n \r\n}\r\n\r\n\r\n"," <div class=\"login\">\r\n      <div class=\"container\">\r\n        <img class=\"img\" src=\"/assets/harman.jpg\">\r\n          <button type=\"button\" class=\"btn btn-primary\" style=\"margin-top: 90px; margin-left: 200px;\" data-toggle=\"modal\" data-target=\"#myModal\">\r\n              Login\r\n          </button>\r\n      </div>\r\n  </div>\r\n\r\n  <form>\r\n    <div class=\"modal\" id=\"myModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n              <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\" style=\"margin-left: 35%;\">Authentication</h4>\r\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n              </div>\r\n          <div class=\"Authentication\">\r\n                <form [formGroup]=\"loginform\" (ngSubmit)=\"login()\">\r\n                  <label for=\"email\">Email</label>\r\n                  <input type=\"email\" class=\"form-control\" placeholder=\"Enter email\" id=\"email\" formControlName=\"email\">\r\n                  <div class=\"form-text text-danger\" *ngIf=\"Email.errors?.['required'] && (Email.dirty || Email.touched)\"> \r\n                    Email is Required\r\n                  </div>\r\n                  <div class=\"form-text text-danger\" *ngIf=\"Email.errors?.['email'] &&(Email.dirty || Email.touched)\">\r\n                    Email is Invalid\r\n                </div>\r\n                  <label for=\"pwd\">Password</label>\r\n                  <input type=\"password\" class=\"form-control\" placeholder=\"Enter password\" id=\"password\" formControlName=\"password\">\r\n                  <div class=\"form-text text-danger\" *ngIf=\"Password.errors?.['required'] && (Password.dirty || Password.touched)\">Password is required</div>\r\n                  <div class=\"form-text text-danger\"*ngIf=\"Password.errors?.['minlength'] || Password.errors?.['maxlength'] && (Password.dirty || Password.touched)\">Password should be at least 6 and at the max 15 characters long.</div>\r\n                  <button style=\"margin-left: 40%; margin-top: 15%;\"  type=\"login\" class=\"button\" class=\"btn btn-primary mb-2\">login</button>\r\n                </form>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-danger\" (click)=\"close()\" class=\"close\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div> \r\n    <router-outlet></router-outlet>  \r\n  </form> \r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}